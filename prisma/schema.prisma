generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// --- ENUMS ---

enum HabitType {
  POSITIVE
  NEGATIVE
  BOTH
}

enum Difficulty {
  TRIVIAL
  EASY
  MEDIUM
  HARD
}

enum RepeatFrequency {
  DAILY
  WEEKLY
  MONTHLY
}

enum PetStat {
  HUNGER
  HAPPINESS
  HEALTH
  ENERGY
}

enum ItemType {
  FOOD
  TREAT
  TOY
  CUSTOMIZATION
  SPECIAL
}

enum EquipmentSlot {
  HAT
  GLASSES
  SHIRT
  BACKGROUND
}

enum UserGroupRole {
  OWNER
  ADMIN
  MEMBER
}

enum MembershipStatus {
  ACTIVE
  PENDING
}

// --- CORE MODELS ---

model User {
  id           String   @id @default(uuid())
  email        String   @unique
  username     String   @unique
  passwordHash String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  gold Int @default(10)
  gems Int @default(0)

  // Relations
  habits     Habit[]
  todos      Todo[]
  dailies    Daily[]
  rewards    Reward[]
  pet        Pet?
  inventory  UserPetItem[]
  challenges UserChallenge[]
  groups     UserGroup[]
  habitLogs  HabitLog[]

  // --- ADD THIS RELATION ---
  // This completes the link between User and DailyLog
  dailyLogs DailyLog[]
  groupMessages GroupMessage[]
}

// --- HABIT & TASK TRACKING (Unchanged) ---
model Habit {
  id              String     @id @default(uuid())
  userId          String
  title           String
  notes           String?
  type            HabitType  @default(POSITIVE)
  difficulty      Difficulty @default(MEDIUM)
  isPaused        Boolean    @default(false)
  positiveCounter Int        @default(0)
  negativeCounter Int        @default(0)
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
  currentStreak   Int        @default(0)
  longestStreak   Int        @default(0)

  // --- ADD THIS NEW FIELD ---
  goldRewardLockedUntil DateTime? // Tracks when the gold reward is re-enabled after an upgrade

  user            User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  logs            HabitLog[]
  repeatDays      Json?
  repeatFrequency RepeatFrequency @default(DAILY)

  @@index([userId])
}

model HabitLog {
  id        String   @id @default(uuid())
  habitId   String
  userId    String
  date      DateTime @default(now())
  completed Boolean
  notes     String?
  habit     Habit    @relation(fields: [habitId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([habitId])
  @@index([userId])
}

model Todo {
  id         String     @id @default(uuid())
  userId     String
  title      String
  notes      String?
  dueDate    DateTime?
  completed  Boolean    @default(false)
  difficulty Difficulty @default(MEDIUM)
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model DailyLog {
  id      String   @id @default(uuid())
  dailyId String
  userId  String
  date    DateTime @default(now())
  notes   String?

  daily Daily @relation(fields: [dailyId], references: [id], onDelete: Cascade)
  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([dailyId])
  @@index([userId])
}

// Also, add the relation back to the Daily model
model Daily {
  id                    String     @id @default(uuid())
  userId                String
  title                 String
  notes                 String?
  completed             Boolean    @default(false)
  difficulty            Difficulty @default(MEDIUM)
  lastCompleted         DateTime?
  createdAt             DateTime   @default(now())
  updatedAt             DateTime   @updatedAt
  goldRewardLockedUntil DateTime?

  // --- ADD THIS RELATION ---
  logs DailyLog[]

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Reward {
  id        String   @id @default(uuid())
  userId    String
  title     String
  notes     String?
  cost      Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

// --- PET SYSTEM (Corrected) ---

model Pet {
  id        String   @id @default(uuid())
  userId    String   @unique
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  hunger    Int @default(100)
  happiness Int @default(100)
  health    Int @default(100)
  energy    Int @default(100)

  user     User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  equipped EquippedItem[] // This relation is now correctly defined
}

model PetItem {
  id            String         @id @default(uuid())
  name          String         @unique
  description   String
  type          ItemType
  cost          Int
  statEffect    PetStat?
  effectValue   Int?
  isPremium     Boolean        @default(false)
  equipmentSlot EquipmentSlot?

  ownedBy    UserPetItem[]
  equippedOn EquippedItem[]
}

model UserPetItem {
  id        String   @id @default(uuid())
  userId    String
  itemId    String
  quantity  Int      @default(1)
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  item      PetItem  @relation(fields: [itemId], references: [id], onDelete: Cascade)

  @@unique([userId, itemId])
  @@index([userId])
}

// CORRECTED: This table now links directly to Pet.
model EquippedItem {
  id        String        @id @default(uuid())
  petId     String // Foreign key to the Pet model
  petItemId String
  slot      EquipmentSlot

  pet  Pet     @relation(fields: [petId], references: [id], onDelete: Cascade)
  item PetItem @relation(fields: [petItemId], references: [id], onDelete: Cascade)

  // A pet can only have one item equipped per slot.
  @@unique([petId, slot])
}

// --- CHALLENGES & SOCIAL (Unchanged) ---
model Challenge {
  id           String          @id @default(uuid())
  creatorId    String?
  title        String
  description  String
  goal         String
  isPublic     Boolean         @default(true)
  createdAt    DateTime        @default(now())
  participants UserChallenge[]
}

model UserChallenge {
  id          String    @id @default(uuid())
  userId      String
  challengeId String
  progress    Int       @default(0)
  completed   Boolean   @default(false)
  joinedAt    DateTime  @default(now())
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  challenge   Challenge @relation(fields: [challengeId], references: [id], onDelete: Cascade)

  @@unique([userId, challengeId])
  @@index([userId])
  @@index([challengeId])
}

model Group {
  id          String      @id @default(uuid())
  name        String      @unique
  description String?
  isPublic    Boolean     @default(true)
  createdAt   DateTime    @default(now())
  members     UserGroup[]
  messages      GroupMessage[]
}

model GroupMessage {
  id        String   @id @default(uuid())
  content   String
  createdAt DateTime @default(now())

  groupId   String
  userId    String

  group     Group    @relation(fields: [groupId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([groupId])
  @@index([userId])
}

model UserGroup {
  id        String   @id @default(uuid())
  userId    String
  groupId   String
  
  // Use the new enums for role and status
  role      UserGroupRole    @default(MEMBER)
  status    MembershipStatus @default(ACTIVE)

  joinedAt  DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  group     Group    @relation(fields: [groupId], references: [id], onDelete: Cascade)

  @@unique([userId, groupId])
  @@index([userId])
  @@index([groupId])
}
